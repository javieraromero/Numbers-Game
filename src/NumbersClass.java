// File: NumbersClass.java

/**
 * Dissects the winning number and generates all six possible winning combinations, 
 * and returns the user's winnings based on their bet type and accuracy.
 * @author javie
 */

public class NumbersClass
{
    // Instance variables
    
    int amount, playerNum, winningNum;         //the bet amount, the player's number, and the winning number
    String betType;                            //the bet type
    int win1, win2, win3, win4, win5, win6;    //all 6 possible winning numbers
    int winNum1, winNum2, winNum3;             //the 3 digits of the winning number
    boolean exact = false, any = false, duplicate = false;           //extra credit
    
    
    /**
     * Class constructor; adds value to instance variables.
     * @param type bet type (straight, box)
     * @param amt bet amount, in dollars
     * @param playNum player's number
     * @param winNum winning number
     */
    public NumbersClass(String type, int amt, int playNum, int winNum)
    {
        betType = type;
        amount = amt;
        playerNum = playNum;
        winningNum = winNum;
    }
    
    /**
     * Dissects the winning number and generates all six possible winning
     * combinations.
     */
    public void winningNumbers()
    {
        winNum1 = (int)winningNum/100;          //The 3 digits that make up
        winNum2 = (int)(winningNum/10)%10;      //the winning number.
        winNum3 = (int)winningNum%10;
        
        win1 = winningNum;              //The six possible winning combinations.
        win2 = Integer.parseInt(winNum1 +""+ winNum3 +""+ winNum2);
        win3 = Integer.parseInt(winNum3 +""+ winNum1 +""+ winNum2);
        win4 = Integer.parseInt(winNum3 +""+ winNum2 +""+ winNum1);
        win5 = Integer.parseInt(winNum2 +""+ winNum1 +""+ winNum3);
        win6 = Integer.parseInt(winNum2 +""+ winNum3 +""+ winNum1);
    }
    
    /**
     * Based on the bet type, checks the player number and compares it to the 
     * numbers generated by the winningNumbers() method.
     * @return The user's winnings, in dollars, based on their bet type, amount
     *         and accuracy.
     */
    public int winnings()
    {
        if("Straight".equalsIgnoreCase(betType))        //straight bet
        {
            if(playerNum == winningNum)
            {
                exact = true;       //extra credit
                return 600 * amount;
            }
            else
                return 0;
        }
        
        else        //box bet
        {
            if(playerNum == win1 || playerNum == win2 || playerNum == win3 || 
                    playerNum == win4 || playerNum == win5 || playerNum == win6)
                //player number matches any of the six combinations
            {
                
                if(playerNum == win1)           //player num is same as winning num
                        exact = true;           //extra credit
                
                if((winNum1 == winNum3) || (winNum1 == winNum2) || (winNum2 == winNum3))
                //number contains duplicates
                {
                    duplicate = true;       //extra credit
                    return 200 * amount;
                }
                else
                {
                    any = true;             //extra credit
                    return 100 * amount;
                }
            }
            
            else
                return 0;
        }
    }
   
    /**
     * Generates the output which is visible to the user before the program ends.
     * @return The formatted output, as a string.
     */
    public String output()
    {
        String BetType;     //The user's bet type, formatted for output
        
        if("Straight".equalsIgnoreCase(betType))
            BetType = "Straight bet";
        else
            BetType = "Box bet";
        
        return ("Bet Type:                   " + BetType 
                + "\nBet Amount:                 "
                + "$" + amount + "\nPlayer Number:              " 
                + playerNum + "\nWinning Number:             " 
                + winningNum);
    }
    
    /**
     * Extra credit: If the user won, tells the user which type their match was 
     * (duplicate match, exact match, any match).
     * @return A string, telling the user their match type. If user lost, returns
     * nothing.
     */
    public String extraCredit()
    {
        if(duplicate)
            return "Contains duplicates";
        else if(exact)
            return "Exact order match";
        else if(any)
            return "Any order match";
        else
            return "";
    }
}